FileList = require('models/file_list')
FileModel = require('models/file')
FileFinder = require('views/file_finder_view')
editorPane = require('views/editor_pane_view').editorPane
UnsavedFileList = require('views/unsaved_file_list_view')
UnsavedFileCollection = require('models/unsaved_file_collection')
configuration = require('configuration').configuration

setupShortcuts= (fileFinder) ->
  $(document).bind('keydown', 'ctrl+p', -> fileFinder.show())
  $(document).bind('keydown', 'ctrl+s', -> editorPane().saveActive())

reloadLayout= (fileList) ->
  #To reload the layout before the filelist has finished loading, 
  #the filelist needs some smarts about finding files on disk vs ones that have already been found from reloading the layout
  console.log('reloading layout')
  layout = configuration.get('layout')
  for conf in layout || []
    file = fileList.getByPath(conf.path)
    unless file?
      file = new FileModel.File(path:conf.path)
      fileList.add(file)
    editorPane().loadFile(file, conf.position)

exports.bootstrap= ->
#  root_path = process.cwd() + "/"
  root_path="/home/jon/data/Projects/atlas/"
  console.log("Starting in '#{root_path}'")
  configuration.loadConfigFor(root_path).done -> 
    console.log('config loaded')

    fileList = new FileList.FileList(null, path: root_path)
    fileList.startRead().done (elapsedMilliSeconds) ->
      console.log("finished reading #{fileList.length} files in #{elapsedMilliSeconds}ms")
      #TODO: ideally we would reload the layout earlier than this. 
    reloadLayout(fileList)

    fileFinder = new FileFinder.FileFinderView(model:fileList)
    $("body").append fileFinder.render().el

    fileFinder.on('fileSelected', (file) -> editorPane().loadFile(file))
    editorPane().on('layoutUpdated', (layout) -> configuration.set(layout:layout))  

    unsavedFileCollection = new UnsavedFileCollection.UnsavedFileCollection(null, collection:fileList)
    unsavedFileList = new UnsavedFileList.UnsavedFileListView(model:unsavedFileCollection)
    $("body").append unsavedFileList.render().el

    setupShortcuts(fileFinder)
