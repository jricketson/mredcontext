fs = require ('fs')
FileModel = require('models/file')
FileFinder = require('views/file_finder_view')
UnsavedFileList = require('views/unsaved_file_list_view')
UnsavedFileCollection = require('models/unsaved_file_collection')
fileList = require('models/file_list').fileList
editorPane = require('views/editor_pane_view').editorPane
configuration = require('configuration').configuration

setupShortcuts= (fileFinder) ->
  $(document).bind('keydown', 'ctrl+p', -> fileFinder.show())
  $(document).bind('keydown', 'ctrl+s', -> editorPane().saveActive())

reloadLayout= ->
  #To reload the layout before the filelist has finished loading, 
  #the filelist needs some smarts about finding files on disk vs ones that have already been found from reloading the layout
  console.log('reloading layout')
  layout = configuration.get('layout')
  for conf in layout || []
    file = fileList().getByPath(conf.path)
    unless file?
      file = new FileModel.File(path:conf.path)
      fileList().add(file)
    editorPane().showEditorForFile(file, position:conf.position)

loadPlugins= ->
  promise = new $.Deferred()
  fs.readdir("#{process.cwd()}/plugins", (error, files) =>
    for f in files
      if f[0] != '.'
        console.log("loading plugin #{f}")
        module = require("#{process.cwd()}/plugins/#{f}")
        module.register()
    promise.resolve()
  )
  promise

exports.bootstrap= ->
#  root_path = process.cwd() + "/"
  root_path="/home/jon/data/Projects/atlas/"
  console.log("Starting in '#{root_path}'")
  loadPlugins().done ->
    configuration.loadConfigFor(root_path).done -> 
      doSetup()

doSetup= ->
    console.log('config loaded')

    fileList().startRead().done (elapsedMilliSeconds) ->
      console.log("finished reading #{fileList().length} files in #{elapsedMilliSeconds}ms")
    reloadLayout()

    fileFinder = new FileFinder.FileFinderView(model:fileList())
    $("body").append fileFinder.render().el

    fileFinder.on('fileSelected', (file) -> editorPane().showEditorForFile(file))
    editorPane().on('layoutUpdated', (layout) -> configuration.set(layout:layout))  

    unsavedFileCollection = new UnsavedFileCollection.UnsavedFileCollection(null, collection:fileList())
    unsavedFileList = new UnsavedFileList.UnsavedFileListView(model:unsavedFileCollection)
    $("body").append unsavedFileList.render().el

    setupShortcuts(fileFinder)
