Haml = require('haml')
mixin = require('mixin')
movable = require('views/mixins/movable')

class EditorView extends Backbone.View

  className: 'editor'

  template: Haml """
    .titleBar.moveHandle
      .filename= model.projectPath()
    .codeEditor
    .resizer
  """

  events:
    'mousedown .resizer': '_startResizing'
    'mousedown': '_startMoving'

  initialize: ->
    @model.on('reloaded', @_setFileContent)

  _setFileContent: =>
    @codeEditor.setValue(@model.get('content'))

  render: ->
    @$el.css(top: 100, left: 100)
    @$el.html(@template(model:@model))
    console.log("'#{@model.projectPath()}' file type: '#{@model.get('fileType')}'")
    @codeEditor = CodeMirror(@$el.find('.codeEditor')[0], 
      mode:  @model.get('fileType')
    )
    @

  _startResizing: (e) ->
    e.stopPropagation()
    @_startPosition=
        x:e.clientX, 
        y:e.clientY,
        width: @$el.width(), 
        height: @$el.height(), 
        edWidth:@$el.find('.codeEditor').width(), 
        edHeight:@$el.find('.codeEditor').height()

    mousemove = (e) => 
      @$el.width(@_startPosition.width+(e.clientX-@_startPosition.x))
      @$el.height(@_startPosition.height+(e.clientY-@_startPosition.y))
      @codeEditor.setSize(
          @_startPosition.edWidth+(e.clientX-@_startPosition.x),
          @_startPosition.edHeight+(e.clientY-@_startPosition.y),
      )

    mouseup = -> 
      $(document).off('mousemove', mousemove)
      $(document).off('mouseup', mouseup)

    $(document).on('mousemove', mousemove)
    $(document).on('mouseup', mouseup)

mixin.include(EditorView, movable)
exports.EditorView = EditorView
