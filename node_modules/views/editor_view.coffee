Haml = require('haml')
mixin = require('mixin')
movable = require('views/mixins/movable')

class EditorView extends Backbone.View
  className: 'editor'

  template: Haml """
    .titleBar.moveHandle
      .filename= model.projectPath()
    .codeEditor
    .resizer
  """

  events:
    'mousedown .resizer': '_startResizing'
    'mousedown': '_startMoving'

  initialize: (options) ->
    @model.on('reloaded', @_setFileContent)
    @position = options.position

  toJSON: ->
    path: @model.get('path')
    position:
      top: @$el.position().top
      left: @$el.position().left
      width: @$el.width()
      height: @$el.height()

  _setFileContent: =>
    @_listenToCodeEditorChanges = false
    @codeEditor.setValue(@model.get('content'))
    @_listenToCodeEditorChanges = true

  render: ->
    @$el.css(
      top: @position.top || 100
      left: @position.left || 100
      width: @position.width || 300
      height: @position.height || 300
    )
    @$el.html(@template(model:@model))
    console.log("'#{@model.projectPath()}' file type: '#{@model.get('fileType')}'")
    @codeEditor = CodeMirror(@$el.find('.codeEditor')[0], 
      mode:  @model.get('fileType')
      lineWrapping: true
      autoClearEmptyLines: true
      lineNumbers: true
      onChange: => 
        if @_listenToCodeEditorChanges
          @model.set(content: @codeEditor.getValue())
    )
    @

  setHeightAndWidth: (height, width) ->
    hDiff = height - @$el.height()
    wDiff = width - @$el.width()
    edWidth = @$el.find('.codeEditor').width()
    edHeight= @$el.find('.codeEditor').height()
    @$el.height(height)
    @$el.width(width)
    @codeEditor.setSize(
        edWidth + wDiff
        edHeight + hDiff
    )
    @codeEditor.refresh()

  _startResizing: (e) ->
    e.stopPropagation()
    @_startPosition=
        x:e.clientX
        y:e.clientY
        width: @$el.width()
        height: @$el.height()

    mousemove = (e) => 
      @setHeightAndWidth(
          @_startPosition.height+(e.clientY-@_startPosition.y),
          @_startPosition.width+(e.clientX-@_startPosition.x)
      )
      @trigger('resized')

    mouseup = -> 
      $(document).off('mousemove', mousemove)
      $(document).off('mouseup', mouseup)

    $(document).on('mousemove', mousemove)
    $(document).on('mouseup', mouseup)

mixin.include(EditorView, movable)
exports.EditorView = EditorView
