folder_lib = require('models/folder')
file_lib = require('models/file')
configuration = require('configuration').configuration

class FileList extends Backbone.Collection
  @SEARCH_LIMIT=100
  initialize: (models) ->
    @_files = {}
    @_searchIndex = ';'
    @root = new folder_lib.Folder(configuration.get('rootPath'))
    @foldersLeftToRead = [@root]
    @on('add', @_indexFile)

  _indexFile: (file) ->
    @_files[file.get('path')] = file
    @_searchIndex += "#{file.projectPath()};"

  resetSearch: ->
    clearTimeout(@_currentSearch.timeout) if @_currentSearch?.timeout?
    @_currentSearch= count: 0

  filesMatching: (searchString) ->
    @resetSearch()
    @_currentSearch.searchString = searchString
    @_currentSearch.promise = new $.Deferred()
    any = '[^;]*'
    @_currentSearch.pattern = new RegExp(";(#{any}#{searchString.replace(new RegExp(' ','g'),'').split('').join(any)}#{any});",'gi')
    @_currentSearch.timeout = setTimeout(@_filesMatching, 10)
    @_currentSearch.promise

  _filesMatching: =>
    if (match=@_currentSearch.pattern.exec(@_searchIndex))?
      console.log("searching for #{@_currentSearch.searchString}")
      @_currentSearch.promise.notify(@getByPath(configuration.get('rootPath')+match[1]))
      @_currentSearch.count+=1
      @_currentSearch.timeout = setTimeout(@_filesMatching, 10) if @_currentSearch.count < FileList.SEARCH_LIMIT
    else
      @_currentSearch.promise.resolve()
      @resetSearch

  getByPath: (path) ->
    @_files[path]

  startRead: ->
    @_startedReadingAt = new Date()
    @_deferRead()
    @_readDeferred = new $.Deferred()

  _deferRead: ->
    setTimeout(@_read, 1)

  _read: =>
    folder = @foldersLeftToRead.pop()
    unless folder?
      @_readDeferred.resolve(new Date() - @_startedReadingAt)
      return 
    folder.read().done =>
      for f in folder.files
        if f.constructor == file_lib.File
          #there might be an instance already here if it was loaded from the configuration
          #TODO: this leaves an incorrect reference within the Folder to the File that was constructed there.
          #This needs to be replaced with the one that was found in the collection.
          if (foundFile=@getByPath[f.get('path')])?
            foundFile.set(f.attributes)
          else
            @add f
        else if f.constructor == folder_lib.Folder
          @foldersLeftToRead.push(f)
        else
          console.error("not an instance of anything #{f} #{f.constructor} #{folder.Folder}")

      @_deferRead()

module.exports.FileList = FileList
